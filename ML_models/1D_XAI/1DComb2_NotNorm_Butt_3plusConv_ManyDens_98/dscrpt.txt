Building Function:
def build_SeparatedEASYmodel(input_shape1, input_shape2, input_shape3):
    # First input branch
    input1 = Input(shape=input_shape1, name='input1')
    x1 = Conv1D(128, kernel_size=40, strides=8, activation='relu', name='conv1d_1_1')(input1)
    x1 = MaxPooling1D(pool_size=2, name='maxpool1d_1_1')(x1)
    x1 = Conv1D(128, kernel_size=20, strides=2, activation='relu', name='conv1d_1_2')(x1)
    x1 = Conv1D(256, kernel_size=4, activation='relu', name='conv1d_1_3')(x1)
    x1 = GlobalMaxPooling1D(name='globalmaxpool1d_1_1')(x1)
    x1 = Dropout(0.2, name='dropout_1_1')(x1)
    out1 = Dense(64, activation='relu', name='dense_1_2')(x1)

    # Second input branch
    input2 = Input(shape=input_shape2, name='input2')
    x2 = Conv1D(128, kernel_size=2, activation='relu', name='conv1d_2_1')(input2)
    x2 = Conv1D(64, kernel_size=8, strides=2, activation='relu', name='conv1d_2_2')(x2)
    x2 = Conv1D(128, kernel_size=4, activation='relu', name='conv1d_2_3')(x2)
    x2 = Conv1D(64, kernel_size=2, activation='relu', name='conv1d_2_4')(x2)
    x2 = GlobalMaxPooling1D(name='globalmaxpool1d_2_1')(x2)
    x2 = Dropout(0.1, name='dropout_2_1')(x2)
    out2 = Dense(64, activation='relu', name='dense_2_1')(x2)

    # Third input branch
    input3 = Input(shape=input_shape3, name='input3')
    x3 = Conv1D(64, kernel_size=40, strides=10, activation='relu', name='conv1d_3_1')(input3)
    x3 = Conv1D(64, kernel_size=10, activation='relu', name='conv1d_3_2')(x3)
    x3 = GlobalMaxPooling1D(name = 'globalmaxpool1d_3_1')(x3)
    out3 = Dense(64, activation='relu', name='dense_3_1')(x3)

    # Concatenate the outputs of the branches
    merged = concatenate([out1, out2, out3], name='concatenate_1')
    #merged = Dropout(0.2, name='dropout_merged')(merged)
    merged = Dense(64, activation='relu', name='dense_merged_1')(merged)
    output = Dense(1, activation='sigmoid', name='output')(merged)

    # Create the model
    separated_model = Model(inputs=[input1, input2, input3], outputs=output)

    return separated_model


Assign and Deploy Variables Function:
def assign_and_deploy_variables(data_dict):
    for key, data in data_dict.items():
        globals()[f"{key}1"] = np.dstack((data[:, :, 0], data[:, :, 2]))
        globals()[f"{key}2"] = np.dstack((data[:, :, 3],))
        globals()[f"{key}3"] = np.dstack((data[:, :, 2], data[:, :, 0]))
        # Uncomment and modify the line below if you need the fourth set
        # globals()[f"{key}4"] = np.dstack((data[:, :, 6], data[:, :, 8]))


Model: "functional_9"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input1 (InputLayer) │ (None, 800, 2)    │          0 │ -                 │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ input2 (InputLayer) │ (None, 800, 1)    │          0 │ -                 │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv1d_1_1 (Conv1D) │ (None, 96, 128)   │     10,368 │ input1[0][0]      │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv1d_2_1 (Conv1D) │ (None, 799, 128)  │        384 │ input2[0][0]      │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ maxpool1d_1_1       │ (None, 48, 128)   │          0 │ conv1d_1_1[0][0]  │
│ (MaxPooling1D)      │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv1d_2_2 (Conv1D) │ (None, 396, 64)   │     65,600 │ conv1d_2_1[0][0]  │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv1d_1_2 (Conv1D) │ (None, 15, 128)   │    327,808 │ maxpool1d_1_1[0]… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv1d_2_3 (Conv1D) │ (None, 393, 128)  │     32,896 │ conv1d_2_2[0][0]  │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ input3 (InputLayer) │ (None, 800, 2)    │          0 │ -                 │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv1d_1_3 (Conv1D) │ (None, 12, 256)   │    131,328 │ conv1d_1_2[0][0]  │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv1d_2_4 (Conv1D) │ (None, 392, 64)   │     16,448 │ conv1d_2_3[0][0]  │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv1d_3_1 (Conv1D) │ (None, 77, 64)    │      5,184 │ input3[0][0]      │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ globalmaxpool1d_1_1 │ (None, 256)       │          0 │ conv1d_1_3[0][0]  │
│ (GlobalMaxPooling1… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ globalmaxpool1d_2_1 │ (None, 64)        │          0 │ conv1d_2_4[0][0]  │
│ (GlobalMaxPooling1… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv1d_3_2 (Conv1D) │ (None, 68, 64)    │     41,024 │ conv1d_3_1[0][0]  │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dropout_1_1         │ (None, 256)       │          0 │ globalmaxpool1d_… │
│ (Dropout)           │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dropout_2_1         │ (None, 64)        │          0 │ globalmaxpool1d_… │
│ (Dropout)           │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ globalmaxpool1d_3_1 │ (None, 64)        │          0 │ conv1d_3_2[0][0]  │
│ (GlobalMaxPooling1… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense_1_2 (Dense)   │ (None, 64)        │     16,448 │ dropout_1_1[0][0] │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense_2_1 (Dense)   │ (None, 64)        │      4,160 │ dropout_2_1[0][0] │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense_3_1 (Dense)   │ (None, 64)        │      4,160 │ globalmaxpool1d_… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ concatenate_1       │ (None, 192)       │          0 │ dense_1_2[0][0],  │
│ (Concatenate)       │                   │            │ dense_2_1[0][0],  │
│                     │                   │            │ dense_3_1[0][0]   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense_merged_1      │ (None, 64)        │     12,352 │ concatenate_1[0]… │
│ (Dense)             │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ output (Dense)      │ (None, 1)         │         65 │ dense_merged_1[0… │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 2,004,677 (7.65 MB)
 Trainable params: 668,225 (2.55 MB)
 Non-trainable params: 0 (0.00 B)
 Optimizer params: 1,336,452 (5.10 MB)

Model Configuration:
Optimizer: <keras.src.optimizers.adam.Adam object at 0x7fcaf072bca0>
Loss Function: binary_crossentropy
Learning Rate: <KerasVariable shape=(), dtype=float32, path=adam/learning_rate>

Train loss: 0.009564274922013283
Test val_loss: 0.28305235505104065
Train accuracy: 0.9988623261451721
Accuracy Score: 0.9761092150170648
F1 Score: 0.9785932721712538
Classification Report:
               precision    recall  f1-score   support

         0.0       0.98      0.97      0.97       130
         1.0       0.98      0.98      0.98       163

    accuracy                           0.98       293
   macro avg       0.98      0.98      0.98       293
weighted avg       0.98      0.98      0.98       293

Training History:
accuracy: [0.6370875835418701, 0.7758817076683044, 0.7918089032173157, 0.8009101152420044, 0.8145620226860046, 0.8532423377037048, 0.8509669899940491, 0.8464163541793823, 0.8600682616233826, 0.8782707452774048, 0.8907849788665771, 0.8930602669715881, 0.9021615386009216, 0.8566552996635437, 0.8953356146812439, 0.914675772190094, 0.9089874625205994, 0.9328782558441162, 0.9260523319244385, 0.9488054513931274, 0.9488054513931274, 0.9499431252479553, 0.9215016961097717, 0.9408418536186218, 0.9579067230224609, 0.9533560872077942, 0.9465301632881165, 0.9681456089019775, 0.9613196849822998, 0.9340159296989441, 0.9556313753128052, 0.9658703207969666, 0.9613196849822998, 0.9715585708618164, 0.979522168636322, 0.979522168636322, 0.9704209566116333, 0.9715585708618164, 0.9863481521606445, 0.9874857664108276, 0.9806598424911499, 0.9874857664108276, 0.9931740760803223, 0.9943116903305054, 0.9965870380401611, 0.997724711894989, 0.9988623261451721, 0.9988623261451721]
loss: [0.629464328289032, 0.44165948033332825, 0.40436217188835144, 0.3746802508831024, 0.36286112666130066, 0.3249642252922058, 0.3282833397388458, 0.3229987621307373, 0.2882702946662903, 0.26622962951660156, 0.23218265175819397, 0.22700917720794678, 0.21656876802444458, 0.3110765516757965, 0.2264982908964157, 0.18837648630142212, 0.20209085941314697, 0.16160784661769867, 0.1687355935573578, 0.1357830911874771, 0.13381247222423553, 0.1410422921180725, 0.17132675647735596, 0.14278236031532288, 0.12367703020572662, 0.11492720991373062, 0.1363668292760849, 0.09294085949659348, 0.10150731354951859, 0.15540283918380737, 0.10541187971830368, 0.10751336067914963, 0.10481523722410202, 0.08395376056432724, 0.06604915857315063, 0.06618533283472061, 0.07575561851263046, 0.08672825992107391, 0.04503115639090538, 0.039433833211660385, 0.052894044667482376, 0.04457541182637215, 0.027769336476922035, 0.021597908809781075, 0.016310160979628563, 0.013890593312680721, 0.011731159873306751, 0.009564274922013283]
val_accuracy: [0.7303754091262817, 0.7952218651771545, 0.8054607510566711, 0.8156996369361877, 0.8327645063400269, 0.8430033922195435, 0.8464163541793823, 0.8566552996635437, 0.8668941855430603, 0.8703071475028992, 0.8668941855430603, 0.8907849788665771, 0.8839590549468994, 0.8464163541793823, 0.8668941855430603, 0.914675772190094, 0.894197940826416, 0.9078498482704163, 0.894197940826416, 0.914675772190094, 0.9180887341499329, 0.9249146580696106, 0.9215016961097717, 0.9249146580696106, 0.9180887341499329, 0.873720109462738, 0.914675772190094, 0.914675772190094, 0.8566552996635437, 0.9180887341499329, 0.9283276200294495, 0.9249146580696106, 0.9249146580696106, 0.9419795274734497, 0.9283276200294495, 0.9283276200294495, 0.9112628102302551, 0.9317406415939331, 0.935153603553772, 0.935153603553772, 0.9078498482704163, 0.9283276200294495, 0.935153603553772, 0.9385665655136108, 0.9385665655136108, 0.9317406415939331, 0.935153603553772, 0.9385665655136108]
val_loss: [0.5182549357414246, 0.38862863183021545, 0.3523118197917938, 0.3549342155456543, 0.317759245634079, 0.3200211822986603, 0.3004840612411499, 0.33749526739120483, 0.29619917273521423, 0.2949342727661133, 0.2902924716472626, 0.2509061098098755, 0.281311959028244, 0.3255236744880676, 0.2903806269168854, 0.2179466336965561, 0.25649821758270264, 0.25935813784599304, 0.29811927676200867, 0.24440257251262665, 0.21573081612586975, 0.21552443504333496, 0.2229350209236145, 0.21778111159801483, 0.2086913138628006, 0.30573591589927673, 0.26234444975852966, 0.23751753568649292, 0.3948591649532318, 0.23309949040412903, 0.2339983433485031, 0.2533012330532074, 0.22958904504776, 0.2074318677186966, 0.2171241044998169, 0.2044537365436554, 0.3040170669555664, 0.23420053720474243, 0.2486671805381775, 0.25650033354759216, 0.323604017496109, 0.23566998541355133, 0.2640269696712494, 0.2534753382205963, 0.28650137782096863, 0.26248979568481445, 0.3004651367664337, 0.28305235505104065]

Confusion Matrix:
[[126   4]
 [  3 160]]

################################################################################################ 

